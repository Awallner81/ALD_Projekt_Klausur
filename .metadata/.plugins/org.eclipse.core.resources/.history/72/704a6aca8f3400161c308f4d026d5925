package Server_Route_Planner;

import java.awt.DisplayMode;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class main {

	public static void main(String[] args) {
				
		 Scanner scanner = null;
		 BinarySearchTree1 meinBST = new BinarySearchTree1();
		 Orte orte = new Orte(0, null);
            try {
                scanner = new Scanner(new BufferedReader(new FileReader("orte.txt")));
                //scanner.useDelimiter(",");
                
                
                while(scanner.hasNextLine()) {

                    String input = scanner.nextLine();
                    String[] data = input.split(",");
                    int id = Integer.parseInt(data[0]);
                    String name = data[1];
                    //System.out.println(id + ": " + name);
                    orte = new Orte(id, name);
                    meinBST.insert(orte); 
                	System.out.println(orte.getName());
                	System.out.println(orte.getId());    
                	
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if(scanner != null) {
                    scanner.close();
                }
            } 

		
	System.out.println(orte.getName());
	System.out.println(orte.getId());    
	
        String suche="graz";
        
        System.out.println("Suche " + suche);
       Orte Ergebnis = meinBST.findExact(suche);
        
       System.out.println("ID von "+ suche +" = " +Ergebnis.getId());
      
       
       
			BinarySearchTree b = new BinarySearchTree();
			b.insert(3);b.insert(8);
			b.insert(1);b.insert(4);b.insert(6);b.insert(2);b.insert(10);b.insert(9);
			b.insert(20);b.insert(25);b.insert(15);b.insert(16);
			System.out.println("Original Tree : ");
			b.display(b.root);		
			System.out.println("");
			System.out.println("Check whether Node with value 4 exists : " + b.find(4));
			System.out.println("Delete Node with no children (2) : " + b.delete(2));		
			b.display(root);
			System.out.println("\n Delete Node with one child (4) : " + b.delete(4));		
			b.display(root);
			System.out.println("\n Delete Node with Two children (10) : " + b.delete(10));		
			b.display(root);
		 
	
   	}
	
	}